plugins {
    alias(libs.plugins.kotlin.android)
}
apply plugin: libs.plugins.android.application.get().pluginId
apply plugin: libs.plugins.kotlin.android.get().pluginId
apply plugin: libs.plugins.kotlin.kapt.get().pluginId
apply plugin: libs.plugins.kotlin.parcelize.get().pluginId


def javaVersionEnum = JavaVersion.toVersion(libs.versions.javaVersion.get().toString())

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(javaVersionEnum.toString().toInteger()))
    }
}

android {
    namespace commonValues.appBaseNameSpace
    compileSdk libs.versions.compileSdkVersion.get().toInteger()
    buildFeatures {
        viewBinding = true
        buildConfig = true
    }
    defaultConfig {
        applicationId commonValues.appBaseNameSpace
        minSdk(libs.versions.minSdkVersion.get().toInteger())
        targetSdk(libs.versions.targetSdkVersion.get().toInteger())
        versionName(libs.versions.appVersionName.get())
        versionCode(libs.versions.appVersionCode.get().toInteger())
        vectorDrawables.useSupportLibrary = true

        buildConfigField("Integer", "MINIMUM_CLIENT_VERSION_CODE", "${libs.versions.appHelperMinimumClientVersionCode.get().toInteger()}")
        buildConfigField("Integer", "MINIMUM_SERVER_VERSION_CODE", "${libs.versions.appHelperMinimumServerVersionCode.get().toInteger()}")

    }
    buildTypes {
        release {
            minifyEnabled(commonValues.releaseMinifyEnabled)
            shrinkResources = commonValues.releaseShrinkResourcesEnabled
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            //use proguard on dev builds too in order to avoid multidex issue
            minifyEnabled(commonValues.debugMinifyEnabled)
            shrinkResources = commonValues.debugShrinkResourcesEnabled
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility javaVersionEnum
        targetCompatibility javaVersionEnum
    }

    kotlinOptions {
        jvmTarget = javaVersionEnum.toString()
    }

    applicationVariants.configureEach { variant ->
        variant.outputs.configureEach {
            outputFileName = "aph.apk"
        }
        //outputFileName = outputFileName.replace(".apk", "-${variant.versionName}.apk")

    }


    flavorDimensions += "marketPlace"
    productFlavors {
        nllStore {
            //versionCode versions.versionCode + 10000 Make self updating version bigger may be?
            dimension = "marketPlace"
            versionNameSuffix = "-nllStore"
        }
        galaxyStore {
            dimension = "marketPlace"
            versionNameSuffix = "-galaxyStore"
        }
        appGallery {
            dimension = "marketPlace"
            versionNameSuffix = "-appGallery"
        }
        xiaomiGetApps {
            dimension = "marketPlace"
            versionNameSuffix = "-xiaomiGetApps"
        }
        magiskStore {
            dimension = "marketPlace"
            versionNameSuffix = "-magiskStore"
        }
    }
}


dependencies {

    implementation(libs.bundles.acraBundle)
    implementation(libs.androidx.activity)
    implementation(libs.androidx.appCompat)
    implementation(libs.androidx.constraintLayout)
    implementation(libs.androidx.coordinatorLayout)
    implementation(libs.androidx.startup)
    implementation(libs.androidx.lifecycle.process)
    implementation(libs.androidx.lifecycle.viewModelKtx)
    implementation(libs.androidx.lifecycle.service)
    implementation(libs.androidx.coreKtx)
    implementation(libs.androidx.recyclerView)
    implementation(libs.bundles.coroutinesBundle)
    implementation(libs.google.materialComponents)
    implementation(libs.kotPref)
    implementation(libs.square.okHttp)
    implementation(libs.square.okHttp.loggingInterceptor)
    implementation(libs.karnNotify)

    //If using kotlin coroutines, include following to make even the service connection simpler
    implementation(libs.remoter.builder)
    // Rest of the remoter
    implementation(libs.remoter.annotations)
    kapt(libs.remoter)
    /**
     *  We need this because we are using registerProcessDeath to listen to client crash so we can stop recording and passing Binder() requires
     *  Parceller.
     *
     *  Kotlin parcelize does not seem to work yet
     *  https://github.com/josesamuel/remoter/issues/6
     *
     */
    implementation(libs.remoter.parcelerApiDependency)
    kapt(libs.remoter.parcelerDependency)

}